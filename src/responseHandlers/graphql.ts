// eslint-disable-next-line no-unused-vars
import {MockResponseOptions} from "../types/MockResponseOptions"
// eslint-disable-next-line no-unused-vars
import {JsonObject, NetworkResponseBody} from "../types/generalTypes"
import {autoGenerateResponseFromGraphQLSchema} from "../utils/autoGenerateResponseFromGraphQLSchema"
import {graphql} from "msw"
import {makeMswResponseHandler} from "./common"
// eslint-disable-next-line no-unused-vars
import {InternalReference} from "../mockRequest"
import {server} from "../setupAndTeardown"

export const shouldAutoGenerateGraphQLResponse = (
    mockOpts: MockResponseOptions
) => {
    return (
        mockOpts.graphQLAutoMocking &&
        mockOpts.graphQLAutoMocking.schema &&
        !mockOpts.responseBody
    )
}

export const getAutoGeneratedGraphQLResponse = (
    query: string,
    mockOpts: MockResponseOptions,
    variables?: JsonObject
): JsonObject | undefined => {
    if (shouldAutoGenerateGraphQLResponse(mockOpts)) {
        return autoGenerateResponseFromGraphQLSchema({
            stringSchema: mockOpts.graphQLAutoMocking.schema,
            query,
            variables,
            customTypes: mockOpts.graphQLAutoMocking.customTypes,
            fixedArrayLengths: mockOpts.graphQLAutoMocking.fixedArrayLengths,
        })
    }
}

export const handleGraphQLRequest = ({
    mockOpts,
    body,
    statusCode,
    reference,
}: {
    mockOpts: MockResponseOptions
    body: NetworkResponseBody
    statusCode: number
    reference: InternalReference
}) => {
    const mswGraphQL = mockOpts.requestPattern
        ? graphql.link(mockOpts.requestPattern)
        : graphql
    const graphQLQueryType = mockOpts.graphQLQueryName
        ? mswGraphQL.query
        : mswGraphQL.mutation
    const queryOrMutationName =
        mockOpts.graphQLQueryName || mockOpts.graphQLMutationName
    server.use(
        // eslint-disable-next-line no-unused-vars
        graphQLQueryType(queryOrMutationName, (req, res, ctx) => {
            const autoGeneratedResponse = getAutoGeneratedGraphQLResponse(
                req.body.query,
                mockOpts,
                req.body.variables
            )
            const responseBody = autoGeneratedResponse || body
            return makeMswResponseHandler({
                body: responseBody,
                mockOpts,
                mswRequest: req,
                mswResponder: res,
                reference,
                statusCode,
            })
        })
    )
}
