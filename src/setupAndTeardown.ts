import {setupServer} from "msw/node"
import {generateMswGraphQLAutoGenerationHandler} from "./utils"
// eslint-disable-next-line no-unused-vars
import {GraphQLAutoMockStartupOptions} from "./types/GraphQLAutoMockStartupOptions"

export let server

export const setUpNetworkRequestMocking = ({
    persistentAutoGeneratedGraphQLMocks,
    allowUnmockedRequestsOnNetwork,
}: {
    persistentAutoGeneratedGraphQLMocks?: GraphQLAutoMockStartupOptions[]
    allowUnmockedRequestsOnNetwork?: boolean
} = {}) => {
    if (persistentAutoGeneratedGraphQLMocks) {
        const graphQLAutoGenerationHandlers = persistentAutoGeneratedGraphQLMocks.map(
            (autoGenerationOption) => {
                return generateMswGraphQLAutoGenerationHandler(
                    autoGenerationOption
                )
            }
        )
        server = setupServer(...graphQLAutoGenerationHandlers)
    } else {
        server = setupServer()
    }
    if (allowUnmockedRequestsOnNetwork) {
        server.listen()
    } else {
        server.listen({
            onUnhandledRequest: "error",
        })
    }
}

export const tearDownNetworkRequestMocking = () => {
    server.close()
}

export const cleanUpNetworkRequestMocking = () => {
    server.restoreHandlers()
    server.resetHandlers()
}
